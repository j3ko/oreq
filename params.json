{"name":"oreq","tagline":"Fluent OData API for Javascript","body":"# oreq\r\n\r\nGenerate OData requests fluently in Javascript\r\n\r\n## Examples\r\n\r\n**Paging**:\r\n\r\n```javascript\r\nvar url = oreq.request(\"http://services.odata.org/Northwind/Northwind.svc/Customers\").withSkip(10).withTop(10).url();\r\n\r\nconsole.log(url); \r\n// output: http://services.odata.org/Northwind/Northwind.svc/Customers?$top=10&$skip=10\r\n```\r\n\r\n**Sorting**:\r\n\r\n```javascript\r\nvar url = oreq.request(\"http://services.odata.org/Northwind/Northwind.svc/Customers\").withOrderby([\"Country\",\"City\"]).url();\r\n\r\nconsole.log(url); \r\n// output: http://services.odata.org/Northwind/Northwind.svc/Customers?$orderby=Country%2CCity\r\n```\r\n\r\n**Projecting**:\r\n\r\n```javascript\r\nvar url = oreq.request(\"http://services.odata.org/Northwind/Northwind.svc/Customers\").withOrderby([\"CustomerID\",\"CompanyName\",\"City\"]).url();\r\n\r\nconsole.log(url); \r\n// output: http://services.odata.org/Northwind/Northwind.svc/Customers?$select=CustomerID%2CCompanyName%2CCity\r\n```\r\n\r\n**Filtering**:\r\n\r\n```javascript\r\nvar filter = oreq.filter(\"ShipPostalCode\").endsWith(\"'100'\");\r\nvar url = oreq.request(\"http://services.odata.org/Northwind/Northwind.svc/Orders\").withFilter(filter).url();\r\n\r\nconsole.log(url); \r\n// output: http://services.odata.org/Northwind/Northwind.svc/Orders?$filter=endswith%28ShipPostalCode%2C%27100%27%29\r\n```\r\n\r\n## Getting Started\r\n\r\n<!--**NodeJs**:\r\n\r\nInstall the oreq packge:\r\n```\r\n$ npm install oreq\r\n```\r\n\r\nUsage:\r\n```javascript\r\nvar oreq = require(\"oreq\");\r\nvar url = oreq.request(\"http://localhost:3000/Products\").withSkip(1).withTop(10).url();\r\nconsole.log(url);\r\n```\r\n-->\r\n**Browser**:\r\n\r\nInclude oreq.js:\r\n```html\r\n<script type=\"text/javascript\" src=\"https://rawgithub.com/j3ko/oreq/master/src/oreq.js\"></script>\r\n```\r\n\r\nUsage:\r\n```javascript\r\nvar url = oreq.request(\"http://localhost:3000/Products\").withSkip(1).withTop(10).url();\r\n\r\nconsole.log(url);\r\n// output: http://localhost:3000/Products?$top=10&$skip=1\r\n```\r\n\r\n## Documentation\r\n\r\n### oreq Functions:\r\n\r\n| Function | Description |\r\n| -------- | ----------- |\r\n| `request(root)` | Begin an OData [request](#request-functions).  `root` is the string root of the query eg. `\"http://localhost:3000/Products\"`.  When `root` is `undefined`, the given request will return just the parmeter portion of the query when `url()` is called: eg. `?$skip=1&top=10`.|\r\n| `filter(field)` | Begin an OData [filter](#filter-functions).  `field` is a string representing the property in the given OData entity to be filtered on.|\r\n\r\n### request Functions:\r\n\r\n| Function | Description |\r\n| -------- | ----------- |\r\n| `withExpand(value)` | OData `$expand`.  `value` is comma seperated string or array. |\r\n| `withFormat(value)` | OData `$format`.  `value` is a string.  One of `\"atom\"`, `\"json\"` or `\"xml\"`. |\r\n| `withOrderby(value)` | OData `$orderby`.  `value` is a comma seperated string or array. |\r\n| `withTop(value)` | OData `$top`.  `value` is a string or number. |\r\n| `withSkip(value)` | OData `$skip`.  `value` is a string or number. |\r\n| `withSelect(value)` | OData `$select`.  `value` is comma seperated string or array. |\r\n| `withInlinecount()` | OData `$inlinecount`.  Adds `inlinecount=allpages` to the request.|\r\n| `withFilter(value)` | OData `$filter`.  `value` is a filter created from `oreq.filter()`. |\r\n\r\n### filter Functions:\r\n\r\nThere are 3 types of filter expression types:  [Primitive](#primitive-expression), Common and Boolean.\r\n\r\n##### Primitive Expression\r\n\r\n| Function | Description |\r\n| -------- | ----------- |\r\n| `year()` | Evaluate the `year()` of the Date type entity property. <br /> Example: `oreq.filter(\"UpdatedDate\").year();`. |\r\n| `month()` | Evaluate the `month()` of the Date type entity property.  <br /> Example: `oreq.filter(\"UpdatedDate\").month();`. |\r\n| `day()` | Evaluate the `day()` of the Date type entity property. <br /> Example: `oreq.filter(\"UpdatedDate\").day();`. |\r\n| `hour()` | Evaluate the `hour()` of the Date type entity property. <br /> Example: `oreq.filter(\"UpdatedDate\").hour();`. |\r\n| `minute()` | Evaluate the `minute()` of the Date type entity property.  <br /> Example: `oreq.filter(\"UpdatedDate\").minute();`. |\r\n| `second()` | Evaluate the `second()` of the Date type entity property. <br /> Example: `oreq.filter(\"UpdatedDate\").second();`. |\r\n| `any([lambda])` | Evaluate `any()` of the given lambda filter. <br /> Example: `oreq.filter(\"Country\").any(oreq.filter().eq(\"Canada\"));`. |\r\n| `all([lambda])` | Evaluate `all()` of the given lambda filter. <br /> Example: `oreq.filter(\"Country\").all(oreq.filter().eq(\"Canada\"));`. |\r\n\r\n## License\r\noreq.js is freely distributable under the terms of the MIT license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}